{"version":3,"sources":["turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/module.compiled.js","turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.ts","turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts","turbopack:///[project]/src/app/page.tsx"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxRuntime\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.React\n","'use client';\n\nimport { useState } from 'react';\n\ninterface SlotData {\n  date: string;\n  time: string;\n  gmt: string;\n}\n\ninterface ApiResponse {\n  success: boolean;\n  data?: {\n    total_slots: number;\n    total_days: number;\n    note: string;\n    slots: SlotData[];\n  };\n  error?: string;\n  message?: string;\n}\n\nexport default function Home() {\n  const [formData, setFormData] = useState({\n    first_name: 'AliTEST',\n    last_name: 'SyedTEST',\n    email: 'ali+test@mm.ventures',\n    phone: '5127673628',\n    api_token: ''\n  });\n  \n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState<ApiResponse | null>(null);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setResult(null);\n\n    try {\n      const response = await fetch('/api/get-slots', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${formData.api_token}`\n        },\n        body: JSON.stringify({\n          first_name: formData.first_name,\n          last_name: formData.last_name,\n          email: formData.email,\n          phone: formData.phone\n        })\n      });\n\n      const data: ApiResponse = await response.json();\n      setResult(data);\n    } catch (error) {\n      setResult({\n        success: false,\n        error: 'Network Error',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-3xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Chili Piper Slot Scraper\n          </h1>\n          <p className=\"text-gray-600\">\n            Automatically scrape available meeting slots from Chili Piper\n          </p>\n        </div>\n\n        <div className=\"bg-white shadow rounded-lg p-6 mb-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label htmlFor=\"first_name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  First Name\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"first_name\"\n                  value={formData.first_name}\n                  onChange={(e) => setFormData({ ...formData, first_name: e.target.value })}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"last_name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Last Name\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"last_name\"\n                  value={formData.last_name}\n                  onChange={(e) => setFormData({ ...formData, last_name: e.target.value })}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Email\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Phone\n                </label>\n                <input\n                  type=\"tel\"\n                  id=\"phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"api_token\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                API Token\n              </label>\n              <input\n                type=\"password\"\n                id=\"api_token\"\n                value={formData.api_token}\n                onChange={(e) => setFormData({ ...formData, api_token: e.target.value })}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Enter your API token\"\n                required\n              />\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Contact administrator for API token\n              </p>\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? 'Scraping Slots...' : 'Get Available Slots'}\n            </button>\n          </form>\n        </div>\n\n        {result && (\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Results</h2>\n            \n            {result.success && result.data ? (\n              <div>\n                <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-md\">\n                  <p className=\"text-green-800 font-medium\">{result.data.note}</p>\n                  <p className=\"text-green-700 text-sm mt-1\">\n                    Total Slots: {result.data.total_slots} | Total Days: {result.data.total_days}\n                  </p>\n                </div>\n\n                {result.data.slots.length > 0 ? (\n                  <div>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-3\">Available Slots:</h3>\n                    <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                      {result.data.slots.map((slot, index) => (\n                        <div key={index} className=\"flex justify-between items-center p-3 bg-gray-50 rounded-md\">\n                          <div>\n                            <span className=\"font-medium text-gray-900\">{slot.date}</span>\n                            <span className=\"text-gray-600 ml-2\">{slot.time}</span>\n                          </div>\n                          <span className=\"text-sm text-gray-500\">{slot.gmt}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ) : (\n                  <p className=\"text-gray-600\">No available slots found.</p>\n                )}\n              </div>\n            ) : (\n              <div className=\"p-4 bg-red-50 border border-red-200 rounded-md\">\n                <p className=\"text-red-800 font-medium\">Error: {result.error}</p>\n                {result.message && (\n                  <p className=\"text-red-700 text-sm mt-1\">{result.message}</p>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK","vendored","ReactJsxRuntime","React"],"mappings":"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","ignoreList":[0,1,2]}